"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    mycontext['length'] = 0
    mycontext['lock test'] = True
    if not mycontext['lock test'].acquire(False):
        raise RepyArgumentError
    fileName_split = filename.split(".")
    # local (per object) reference to the underlying file
    if fileName_split[0].isalnum() and fileName_split[0].islower():
        self.Afn = filename + '.a'
        self.Bfn = filename + '.b'
    if create and not exist_file():
        if self.Afn in listfiles():
            self.Afile = openfile(self.Afn, create)
        else:
            self.Afile = openfile(self.Afn, create)
            if not(self.Afile.readat(None, 0).startswith("S")  and self.Afile.readat(None, 0).endswith("E")):
                self.Afile.writeat("SE", 0)
                mycontext['length'] = 2
        if self.Bfn in listfiles():
            self.Bfile = openfile(self.Bfn, create)
        else:
            self.Bfile = openfile(self.Bfn, create)
            if not(self.Bfile.readat(None, 0).startswith("S")  and self.Bfile.readat(None, 0).endswith("E")):
                self.Bfile.writeat("SE", 0)
                mycontext['length'] = 2
    else:
        self.Afile = openfile(self.Afn, False)
        self.Bfile = openfile(self.Bfn, False)



  def writeat(self,data,offset):
    mycontext['length'].acquire()
    # Write the requested data to the B file using the sandbox's writeat call
    if not(self.Bfile in listfiles()):
        raise RepyArgumentError
    elif offset < 0:
        raise RepyArgumentError
    elif offset > (len(self.Bfile.readat(None, 0)) + 1):
        raise RepyArgumentError
    elif offset <= mycontext['length']
        self.Bfile.writeat(data,offset)
        mycontext['length'] += len(bytes)
    else:
        raise RepyArgumentError

  def readat(self,bytes,offset):
    mycontext['length'].acquire()
    # Read from the A file using the sandbox's readat...
    if not(self.Afile in listfiles()):
        raise RepyArgumentError
    elif offset < 0:
        raise RepyArgumentError
    elif offset > (len(self.Afile.readat(None, 0)) + 1):
        raise RepyArgumentError
    elif offset <= mycontext['length']
        doc_data = self.Afile.readat(bytes,offset)
        mycontext['length'] += len(bytes)
        return doc_data
    else:
        raise RepyArgumentError

  def close(self):
    self.lock = createlock()
    self.lock.acquire(True)
    data_A = self.Afile.readat(None, 0)
    data_B = self.Bfile.readat(None, 0)

    if self.Bfile.readat(None, 0).startswith("S") and self.Bfile.readat(None, 0).endswith("E"):
        self.Afile.writeat(data_B, 0)
    self.Afile.close()
    self.Bfile.close()
    removefile(self.Afn)
    removefile(self.Bfn)
    mycontext['locktest'].release()


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()